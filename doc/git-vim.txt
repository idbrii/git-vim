*git-vim-vim.txt*  Git Bindings for Vim

==============================================================================
CONTENTS					    *git-vim-contents*

  1. Introduction.............................|git-vim|
  2. Commands.................................|git-vim-commands|
  3. Keymaps..................................|git-vim-keymaps|
  4. License..................................|git-vim-license|

==============================================================================
1. Introduction					    *git-vim*

git-vim-vim provides:

* Plugin files for calling git functions from inside Vim
* Syntax files for git displays

==============================================================================
2. Commands					    *git-vim-commands*

If a command has an [args] argument, it is passed to appropriate git command.

						    *git-vim-command*
:Git [args]			Run git [args] in shell and display output.

						    *git-vim-add*
:GitAdd [afile]			Stage changes in [afile] or current file
				if [afile] is not specified.

						    *git-vim-rm*
:GitRm [afile]			Remove [afile] or current file if [afile] is
				not specified.

						    *git-vim-blame*
:GitBlame			Show what revision and author last modified
				each line of current file.

						    *git-vim-checkout*
:GitCheckout [args]		Checkout a branch or paths to the working
				tree.

						    *git-vim-commit*
:GitCommit [args]		Record changes to the repository.  If no files
				were added to index (either using *:GitAdd* or
				any other tool) it commits everything like >
					git-vim-commit -a
<

						    *git-vim-diff*
:GitDiff [args]			Show changes between commits and working tree.

						    *git-vim-log*
:GitLog [args]			Show commit logs of current file.

						    *git-vim-pull*
:GitPull [args]			Fetch from and merge with another repository
				or local branch.

						    *git-vim-pull-rebase*
:GitPullRebase			Same as :GitPull with --rebase argument.

						    *git-vim-push*
:GitPush [args]			Update remote refs along with associated
				objects. Unless specified in [args], it will
				push to origin/<CURRENT_BRANCH>.

						    *git-vim-status*
:GitStatus			Show working tree status.  You can use keymaps
				in the newly opened buffer to manipulate files.

						    *git-vim-vimdiff*
:GitVimDiff [args]		Show vimdiff between current file and the
				provided tree-ish

						    *git-vim-vimdiff-merge*
:GitVimDiffMerge [args]		Show vimdiff for merge.

						    *git-vim-vimdiff-merge-done*
:GitVimDiffMergeDone		Mark conflicts as resolved and quit diff mode.


==============================================================================
3. Keymaps                                                   *git-vim-keymaps*

All mappings use <Leader> to avoid conflicts with default commands.  See
<mapleader> for details.

<Leader>gd		:GitDiff
<Leader>gD		:GitDiff --cached
<Leader>gb		:GitBlame
<Leader>gs		:GitStatus
<Leader>gl		:GitLog
<Leader>ga		:GitAdd
<Leader>gA		:GitAdd <cfile>
<Leader>gr		:GitRm
<Leader>gr		:GitRm <cfile>
<Leader>gc		:GitCommit
<Leader>gp		:GitPullRebase
<Leader>gg		:GitGrep

In the git-vim-status buffer:
<Enter>			:GitAdd <cfile>


==============================================================================
4. License                                                   *git-vim-license*

The MIT License. See MIT-LICENSE in the project directory. 

 vim:tw=78:ts=8:ft=help
